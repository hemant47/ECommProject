@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.product_service.service.FakeStoreProductServiceImpl",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1322970774 { 
   	label=example
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_86488801 { 
   	label=product_service
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   FakeStoreAPIClient1234428539[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)FakeStoreAPIClient</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   fakeStoreAPIPathProduct: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   fakeStoreAPIURL: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   restTemplateBuilder: RestTemplateBuilder [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createProduct(fakeStoreProductRequestDTO: FakeStoreProductRequestDTO): FakeStoreProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteProduct(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getProductById(id: int): FakeStoreProductResponseDTO</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

FakeStoreProductServiceImpl1510986811[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)FakeStoreProductServiceImpl</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   fakeStoreAPIClient: FakeStoreAPIClient [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   restTemplateBuilder: RestTemplateBuilder [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createProduct(productRequestDTO: ProductRequestDTO): ProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteProduct(id: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ findProductByTitle(title: String): ProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ getProductById(id: int): ProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateProduct(id: int, updatedProduct: Product): Product</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ProductController618143830[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ProductController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   productService: ProductService [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createProduct(productRequestDTO: ProductRequestDTO): ResponseEntity</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteProductById(id: int): ResponseEntity</TD></TR>
<TR><TD ALIGN="LEFT" >+ getProductFromId(id: int): ResponseEntity</TD></TR>
<TR><TD ALIGN="LEFT" >+ getProductFromTitle(title: String): ResponseEntity</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ProductMapper958076933[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ProductMapper</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ convertProductToProductResponseDTO(p: Product): ProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ convertProductsToProductListResponseDTO(products: List&lt;Product&gt;): ProductListResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ fakeProductResponseToProductResponse(fakeStoreProductResponseDTO: FakeStoreProductResponseDTO): ProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ productRequestToFakeStoreProductRequest(productRequestDTO: ProductRequestDTO): FakeStoreProductRequestDTO</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ProductServiceImpl1510986811[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ProductServiceImpl</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   productRepository: ProductRepository [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createProduct(productRequestDTO: ProductRequestDTO): ProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteProduct(id: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ findProductByTitle(title: String): ProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ getProductById(id: int): ProductResponseDTO</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateProduct(id: int, updatedProduct: Product): Product</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

StringToUUID958076933[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)StringToUUID</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ toUUID(input: String): UUID</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
FakeStoreProductServiceImpl1510986811 -> FakeStoreAPIClient1234428539[label="fakeStoreAPIClient
[0..1]"];
FakeStoreProductServiceImpl1510986811 -> ProductServiceImpl1510986811[arrowhead=none];
ProductController618143830 -> FakeStoreProductServiceImpl1510986811[label="productService
[0..1]", arrowhead=none];
ProductMapper958076933 -> StringToUUID958076933[label="fakeProductResponseToProductResponse() -> toUUID()"];
ProductServiceImpl1510986811 -> ProductMapper958076933[label="findProductByTitle() -> convertProductToProductResponseDTO()"];
    
}
@enduml